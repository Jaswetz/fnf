@import url("http://fonts.googleapis.com/css?family=PT+Serif:700");
@import url("http://fonts.googleapis.com/css?family=Open+Sans:400italic,400,700,600");
/* ==========================================================================
   Main Scss File: Importing all other files
   ========================================================================== */
@media (min-width: 0) {
  body::before {
    content: '{ "current" : "small", "all" : [small], "position" : 0 }';
    display: none; } }

/*! Grid based on https://github.com/necolas/griddle by Nicolas Gallagher (@necolas) */
body {
  font-size: 1em; }

.wrapper {
  margin-left: auto;
  margin-right: auto;
  padding-left: 1.25em;
  padding-right: 1.25em; }

img {
  max-width: 100%; }

.no-js .responsive-image {
  display: none; }

.grid {
  display: block;
  padding: 0;
  margin: 0 -0.625em;
  text-align: left;
  letter-spacing: -0.31em;
  text-rendering: optimizespeed; }

.opera:-o-prefocus, .grid {
  word-spacing: -0.43em; }

.grid > .grid {
  overflow: hidden;
  margin-right: 0;
  margin-left: 0; }

.grid__cell {
  width: 100%;
  display: -moz-inline-stack;
  display: inline-block;
  *vertical-align: auto;
  zoom: 1;
  *display: inline;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0.625em;
  /* controls vertical positioning of units */
  vertical-align: top;
  /* keeps unit content correctly aligned */
  text-align: left;
  /* reset text defaults */
  letter-spacing: normal;
  word-spacing: normal;
  text-rendering: auto; }

.grid--center {
  text-align: center; }

.grid__cell--center {
  display: block;
  margin: 0 auto; }

/* ==========================================================================
   Variables
   ========================================================================== */
.intro .downArrow, .navbar .logo, .project h2, .project img, .social li a, .btn {
  -webkit-transition-property: all;
          transition-property: all;
  -webkit-transition-duration: .2s;
          transition-duration: .2s;
  -webkit-transition-timing-function: ease-in;
          transition-timing-function: ease-in; }

/* ==========================================================================
   Helper classes - Class & placeholders helpers
   ========================================================================== */
/*
 * Hide visually and from screen readers:
 */
.hidden {
  display: none !important; }

/*
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }

/*
 * Extends the .visuallyhidden class to allow the element
 * to be focusable when navigated to via the keyboard:
 * https://www.drupal.org/node/897638
 */
.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto; }

/*
 * Hide visually and from screen readers, but maintain layout
 */
.invisible {
  visibility: hidden; }

/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.clearfix:before, .section:before, .clearfix:after, .section:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */ }
.clearfix:after, .section:after {
  clear: both; }

.text-left {
  text-align: left; }

.text-right {
  text-align: right; }

.text-center {
  text-align: center; }

.normal {
  font-weight: normal; }

.bold {
  font-weight: bold; }

.italic {
  font-style: italic; }

.push {
  margin-bottom: 1.5rem; }

.push-none, .push-0 {
  margin-bottom: 0; }

.push-double, .about__wrapper, .title, .push-2 {
  margin-bottom: 3rem; }

.push-half, .push-1-2 {
  margin-bottom: 0.75rem; }

.push-quarter, .push-1-4 {
  margin-bottom: 0.375rem; }

.pad-top, .project, .pad-t {
  padding-top: 1.5rem; }

.pad-bottom, .project, .pad-b {
  padding-bottom: 1.5rem; }

.pad-top-double, .pad-t-2 {
  padding-top: 3rem; }

.pad-bottom-double, .section, .pad-b-2 {
  padding-bottom: 3rem; }

.pad-top-half, .pad-t-1-2 {
  padding-top: 0.75rem; }

.pad-bottom-half, .pad-b-1-2 {
  padding-bottom: 0.75rem; }

.pad-top-quarter, .pad-t-1-4 {
  padding-top: 0.375rem; }

.pad-bottom-quarter, .pad-b-1-4 {
  padding-bottom: 0.375rem; }

.island, .thanks-inner {
  padding: 1.5rem; }

.island-double, .island-2 {
  padding: 3rem; }

.island-half, .island-1-2 {
  padding: 0.75rem; }

.island-quarter, .island-1-4 {
  padding: 0.375rem; }

.gutter {
  padding-left: 1.5rem;
  padding-right: 1.5rem; }

.gutter-double, .gutter-2 {
  padding-left: 3rem;
  padding-right: 3rem; }

.gutter-half, .gutter-1-2 {
  padding-left: 0.75rem;
  padding-right: 0.75rem; }

.gutter-quarter, .gutter-1-4 {
  padding-left: 0.375rem;
  padding-right: 0.375rem; }

.listReset, .listInline, .social {
  list-style: none;
  margin: 0;
  padding: 0; }

.listInline > li, .social > li {
  display: inline-block; }

/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

/* ==========================================================================
   Base file - Base global styles
   ========================================================================== */
/*
 * Remove text-shadow in selection highlight:
 * https://twitter.com/miketaylr/status/12228805301
 *
 * These selection rule sets have to be separate.
 * Customize the background color to match your design.
 */
::-moz-selection {
  background: #b3d4fc;
  text-shadow: none; }
::selection {
  background: #b3d4fc;
  text-shadow: none; }

/*
 * A better looking default horizontal rule
 */
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0; }

/*
 * Remove the gap between audio, canvas, iframes,
 * images, videos and the bottom of their containers:
 * https://github.com/h5bp/html5-boilerplate/issues/440
 */
audio, canvas, iframe, img, svg, video {
  vertical-align: middle; }

/* apply a natural box layout model to all elements, but allowing components to change */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

img {
  width: 100%;
  height: auto; }

/* ==========================================================================
   Typography
   ========================================================================== */
.sg-style, html {
  font-family: 'Open Sans', Helvetica, Arial, sans-serif;
  font-weight: normal;
  line-height: 1.5;
  color: #404040; }

html {
  font-size: 100%; }
  @media (min-width: 50em) {
    html {
      font-size: 110%; } }
  @media (min-width: 70em) {
    html {
      font-size: 120%; } }
  @media (min-width: 90em) {
    html {
      font-size: 130%; } }

h1, h2, h3, h4, h5, h6 {
  font-family: 'PT Serif', Georgia, serif;
  font-weight: 700;
  color: #3372df; }

.yotta, .intro .hgroup .introHeader, .about__text h2, .zetta {
  font-family: 'Open Sans', Helvetica, Arial, sans-serif; }

.yotta, .intro .hgroup .introHeader, .about__text h2 {
  font-size: 2.2807rem;
  line-height: 1.3154;
  color: #3372df;
  font-weight: 900;
  text-transform: uppercase; }

.zetta {
  font-size: 2.0273rem;
  line-height: 1.4798;
  color: #3372df; }

h1, .exa {
  font-size: 1.802rem;
  line-height: 1.6648; }

h2, .peta {
  font-size: 1.6018rem;
  line-height: 1.8729; }

h3, .tera {
  font-size: 1.4238rem;
  line-height: 1.0535; }

h4, .giga {
  font-size: 1.2656rem;
  line-height: 1.1852; }

h5, .mega {
  font-size: 1.125rem;
  line-height: 1.3333; }

h6, .kilo, .title {
  font-size: 1rem;
  line-height: 1.5000; }

p {
  margin: 0 0 1.5rem; }

small, .milli, .tags span {
  font-size: 0.8889rem;
  line-height: 1.6875; }

.micro {
  font-size: 0.7901rem;
  line-height: 1.8984; }

/* ==========================================================================
   Layout - Main layout file
   ========================================================================== */
body {
  margin: 0;
  padding: 0;
  position: absolute;
  width: 100%;
  height: 100%; }

main {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  main:after {
    content: " ";
    display: block;
    clear: both; }

.section {
  clear: both;
  width: 100%;
  float: left;
  padding-left: 1.66667%;
  padding-right: 1.66667%;
  position: relative;
  clear: both; }

/*
   #Nav
   ========================================================================== */
.navbar {
  clear: both;
  width: 100%;
  float: left;
  padding-left: 1.66667%;
  padding-right: 1.66667%; }
  .navbar .brand {
    width: 100%;
    float: left;
    padding-left: 1.66667%;
    padding-right: 1.66667%; }
    @media (min-width: 37.5em) {
      .navbar .brand {
        width: 50%;
        float: left;
        padding-left: 1.66667%;
        padding-right: 1.66667%; } }
    @media (min-width: 64em) {
      .navbar .brand {
        width: 75%;
        float: left;
        padding-left: 1.66667%;
        padding-right: 1.66667%; } }
  .navbar > ul li {
    width: 33.33333%;
    float: left; }
    @media (min-width: 37.5em) {
      .navbar > ul li {
        width: 16.66667%;
        float: left; } }
    @media (min-width: 64em) {
      .navbar > ul li {
        width: 8.33333%;
        float: left; } }

/*
   #About
   ========================================================================== */
.about .about__wrapper {
  max-width: 50em;
  margin-left: auto;
  margin-right: auto; }
  .about .about__wrapper:after {
    content: " ";
    display: block;
    clear: both; }
.about .about__img {
  width: 100%;
  float: left;
  padding-left: 1.66667%;
  padding-right: 1.66667%; }
  @media (min-width: 37.5em) {
    .about .about__img {
      width: 33.33333%;
      float: left;
      padding-left: 1.66667%;
      padding-right: 1.66667%; } }
.about .about__text {
  width: 100%;
  float: left;
  padding-left: 1.66667%;
  padding-right: 1.66667%;
  text-align: center; }
  @media (min-width: 37.5em) {
    .about .about__text {
      width: 66.66667%;
      float: left;
      padding-left: 1.66667%;
      padding-right: 1.66667%;
      text-align: left; } }

/*
   #Skills
   ========================================================================== */
.skill {
  text-align: center; }
  @media (min-width: 50em) {
    .skill {
      width: 33.33333%;
      float: left;
      padding-left: 1.66667%;
      padding-right: 1.66667%; } }

/*
   #Projects
   ========================================================================== */
.section.projects {
  padding-bottom: 0; }

.project {
  clear: both;
  width: 100%;
  float: left;
  padding-left: 1.66667%;
  padding-right: 1.66667%; }

@media (min-width: 37.5em) {
  .project__img {
    width: 33.33333%;
    float: left;
    padding-left: 1.66667%;
    padding-right: 1.66667%; } }

@media (min-width: 37.5em) {
  .project__info {
    width: 66.66667%;
    float: left;
    padding-left: 1.66667%;
    padding-right: 1.66667%; } }

/*
   Design Examples
   ========================================================================== */
.examples .examples__wrapper {
  width: 100%;
  float: left;
  padding-left: 1.66667%;
  padding-right: 1.66667%; }
@media (min-width: 50em) {
  .examples .examples__imgs li {
    width: 50%;
    float: left; } }

/*
   Footer
   ========================================================================== */
.social-wrap {
  width: 100%;
  float: left;
  padding-left: 1.66667%;
  padding-right: 1.66667%; }

.thanks {
  width: 100%;
  float: left;
  padding-left: 1.66667%;
  padding-right: 1.66667%; }

/* ==========================================================================
   Intro - Landing area
   ========================================================================== */
.intro {
  display: table;
  width: 100%;
  max-width: none;
  height: 100vh;
  margin: 0;
  background: url(../img/bg-tools--small.jpg) no-repeat center center fixed;
  background-color: #3372df;
  background-size: cover; }
  @media (min-width: 64em) {
    .intro {
      background-image: url(../img/bg-tools--large.jpg); } }
  .intro .hgroup {
    text-align: center;
    vertical-align: middle;
    display: table-cell;
    height: 100%;
    padding: 15rem 0;
    padding: 0% 10%; }
    @media (min-width: 50em) {
      .intro .hgroup {
        padding: 0% 20%; } }
    .intro .hgroup .introHeader {
      font-size: 1.6018rem;
      line-height: 1.5;
      color: white; }
      @media (min-width: 50em) {
        .intro .hgroup .introHeader {
          font-size: 2.2807rem;
          line-height: 1.3154; } }
      .intro .hgroup .introHeader .normal {
        font-size: 1.2rem; }
        @media (min-width: 50em) {
          .intro .hgroup .introHeader .normal {
            font-size: 1.5rem; } }
  .intro .downArrow {
    font-size: 1.5rem;
    text-decoration: none;
    margin-top: 1.5rem;
    padding: 0 0.6rem;
    color: white;
    border: 0.2rem solid white;
    border-radius: 50%; }
    .intro .downArrow:hover, .intro .downArrow:active, .intro .downArrow:focus {
      opacity: 0.75; }

/* ==========================================================================
   Main Navigation
   ========================================================================== */
.mainNav {
  position: fixed;
  z-index: 5;
  top: 0;
  width: 100%; }

.navbar {
  -webkit-transition: all 0.5s ease-in-out;
          transition: all 0.5s ease-in-out; }
  .navbar .logo, .navbar .nav-item {
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    color: white;
    -webkit-transition: all 0.5s ease-in-out;
            transition: all 0.5s ease-in-out; }
  .navbar .nav-item {
    padding: 0.75rem 0; }
    @media (min-width: 37.5em) {
      .navbar .nav-item {
        padding: 3rem 0; } }
  .navbar .logo {
    text-align: center;
    padding-top: 0.75rem; }
    .navbar .logo:hover, .navbar .logo:active, .navbar .logo:focus {
      opacity: .75; }
    @media (min-width: 37.5em) {
      .navbar .logo {
        text-align: left;
        padding-top: 2.25rem; } }
    .navbar .logo .icn-logo {
      width: 30px;
      height: 30px;
      fill: white;
      stroke: white; }
      @media (min-width: 37.5em) {
        .navbar .logo .icn-logo {
          width: 50px;
          height: 50px; } }
  .navbar > ul li a {
    text-align: center; }
    .navbar > ul li a:hover {
      background: rgba(255, 255, 255, 0.25); }

/*
   Header animation on scroll
   ========================================================================== */
.js-navbar.scrollNav {
  border-bottom: 0.2rem solid #3372df;
  background: white; }
  .js-navbar.scrollNav .nav-item {
    padding: 0.75rem 0;
    color: #3372df; }
    .js-navbar.scrollNav .nav-item:hover {
      background: #3372df;
      color: white; }
  .js-navbar.scrollNav .brand {
    position: absolute;
    top: -10rem; }
    @media (min-width: 37.5em) {
      .js-navbar.scrollNav .brand {
        position: inherit; } }
    @media (min-width: 37.5em) {
      .js-navbar.scrollNav .brand .logo {
        padding-top: 0.375rem; } }
    .js-navbar.scrollNav .brand .icn-logo {
      fill: #3372df;
      stroke: #3372df; }
      @media (min-width: 37.5em) {
        .js-navbar.scrollNav .brand .icn-logo {
          width: 35px;
          height: 35px; } }
      @media (min-width: 50em) {
        .js-navbar.scrollNav .brand .icn-logo {
          width: 38px;
          height: 38px; } }
      @media (min-width: 70em) {
        .js-navbar.scrollNav .brand .icn-logo {
          width: 42px;
          height: 42px; } }
      @media (min-width: 70em) {
        .js-navbar.scrollNav .brand .icn-logo {
          width: 44px;
          height: 44px; } }

/* ==========================================================================
   About section
   ========================================================================== */
.about {
  background: #eeeeee;
  border-bottom: .1rem solid #e8e8e8; }

.about__text h2 {
  margin-top: 0; }

.about__img {
  margin: 0;
  text-align: center; }
  .about__img img {
    max-width: 250px;
    border-radius: 50%;
    border: .2rem solid white; }
    @media (min-width: 37.5em) {
      .about__img img {
        max-width: inherit; } }

/*
   Skills
   ========================================================================== */
.skill-wrap {
  background: #f6f6f6;
  padding: 0.75rem 0.375rem;
  margin-bottom: 1.5rem;
  height: 100%; }
  @media (min-width: 50em) {
    .skill-wrap {
      padding: 0.375rem 0.75rem; } }
  .skill-wrap .icn {
    width: 100%;
    margin-top: 1.5rem; }

/* ==========================================================================
   Projects
   ========================================================================== */
.project {
  margin-bottom: 1.5rem;
  border: 0.1rem solid #eeeeee;
  text-align: center; }
  .project a {
    text-decoration: none; }
    .project a:hover h2, .project a:active h2, .project a:focus h2 {
      text-decoration: none;
      color: #5f90e6; }
  .project img {
    border: .2rem solid #eeeeee; }
    .project img:hover, .project img:active, .project img:focus {
      border: .2rem solid #3372df; }
  @media (min-width: 37.5em) {
    .project {
      text-align: left; }
      .project h2 {
        margin-top: 0;
        line-height: .75; } }

.tags span {
  margin-top: 0.75rem;
  display: inline-block;
  padding: 0.1rem 0.5rem;
  color: #f4b400;
  border: 0.1rem solid #f4b400;
  border-radius: 0.25rem; }

/* ==========================================================================
   Title of sections
   ========================================================================== */
.title {
  box-sizing: content-box;
  margin-right: -1.66667%;
  margin-left: -1.66667%;
  padding-right: 3.33333%;
  padding-left: 3.33333%;
  font-family: 'Open Sans', Helvetica, Arial, sans-serif;
  font-weight: normal;
  text-align: center;
  margin-top: 0;
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
  color: white;
  background: #3372df; }

/* ==========================================================================
   Footer
   ========================================================================== */
.social-wrap {
  text-align: center;
  background: #3372df; }

.social {
  display: block; }
  .social li {
    text-align: center; }
  .social li a {
    text-align: middle;
    vertical-align: middle;
    display: inline-block;
    padding: 0.75rem; }
    .social li a:hover, .social li a:active, .social li a:focus {
      text-decoration: none;
      opacity: .75; }
  .social svg {
    width: 25px;
    height: 25px;
    fill: white; }

.thanks-inner {
  text-align: center;
  margin-bottom: 1.5rem;
  border: 0.1rem solid #dbe6f9;
  background: #e3ecfb; }
  .thanks-inner .zetta {
    display: block;
    margin-bottom: 1.5rem; }

/* ==========================================================================
   Buttons
   ========================================================================== */
.btn {
  font: inherit;
  text-align: center;
  vertical-align: middle;
  text-decoration: none;
  display: inline-block;
  overflow: visible;
  margin: 0;
  padding: 0.25rem 0.75rem;
  color: #3372df;
  border: 0.2rem solid #3372df;
  border-radius: 0.25rem;
  background: white;
  cursor: pointer; }
  .btn:hover, .btn:active, .btn:focus {
    text-decoration: none;
    color: white;
    background: #3372df; }


/*# sourceMappingURL=data:application/json;base64, */